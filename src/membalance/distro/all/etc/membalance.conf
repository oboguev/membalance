#
# /etc/membalance.conf - membalance configuration file
#
###############################################################################
#  This is a configuration file for membalance(d), a service that runs on     #
#  Xen host system to dynamically adjust memory allocation for Xen virtual    #
#  machines (Xen domains) being executed on this host system, in accordance   #
#  with current memory demand of the domains and control settings imposed by  #
#  system administrator.                                                      #
###############################################################################

#
# Memprobed takes memory pressure reading every @interval seconds
# and reports it to membalance(d) running in the hypervisor domain.
# Initial default value is 5 seconds, but is dynamically adjustable
# by membalanced.
#
# Default: 5 (seconds)
#
# Valid range: 2 - 30 seconds
#
#interval = 5 sec

#
# 
# Membalance will try to leave alone Xen host system memory in the amount
# specified by @host_reserved_hard. Membalance will not expand domains if
# there is less than @host_reserved_hard memory left, nor expand domains
# by an amount that would leave less than @host_reserved_hard available.
# In addition, if host system's free memory drops below @host_reserved_hard,
# membalance will try to shrink managed domains to recover enough memory to
# bring the amount of host system available memory back to @host_reserved_hard.
#
# This amount is in addition to (on top of) Xen free memory slack, which is
# by default calculated by Xen to be 15% of total physical memory available,
# unless is set otherwise. Use command
#     xenstore-read /local/domain/0/memory/freemem-slack
# to find current Xen memory slack (in KBs).
#
# Format: <amount>[optional-space][optional-unit]
#
# Examples: "1024" (default unit is mb)
#           "2000 mb"
#           "2000m"
#           "3G"
#           "3 GB"
#
# Default: 0
#
#host_reserved_hard = 0 MB

# 
# Membalance will try to set the amount of host free memory defined by
# @host_reserved_soft aside for use only by domains in substantial need
# of memory: either domains below their @dmem_quota and with rate > @rate_low,
# or domains any size with rate >= @rate_high.
#
# This amount is in addition to (on top of) Xen free memory slack, 
# as described above.
#
# Format: <amount>[optional-space][optional-unit]
#
# Examples: "1024" (default unit is mb)
#           "2000 mb"
#           "2000m"
#           "3G"
#           "3 GB"
#
# Default is calculated as:
#
#     host_reserved_hard + 10% of (Xen physical memory - 
#                                  Xen free memory slack -
#                                  Dom0 minimal size).
#
#host_reserved_soft = 1 GB

#
# The values of @rate_high, @rate_low, @dmem_incr and @dmem_decr specified
# in this file are used as the defaults for domains, unless they are overriden
# on per-domain basis in individual Xen domain configuration files.
# 
# These values control automatic expansion and contraction of memory allocation
# to the domain. Domain has a greater claim if its data map-in rate (i.e.
# virtual memory hard paging rate plus file system page cache block read-in
# rate) exceeds @rate_high, the smallest claim if its rate is below @rate_low,
# and intermediate claim if its rate is in between @rate_low and @rate_high.
# 
# For instance, at each @interval, if domain data map-in rate exceeds
# @rate_high and domain memory allocation is over the domain quota as specified
# by @dmem_quota in the domain configuration, membalance will try to
# dynamically expand the domain memory allocation by @dmem_incr.
# 
# If data map-in rate is below @rate_high and domain memory allocation is over
# its quota, and host free memory is in short supply, membalance will
# dynamically shrink the domain memory allocation by @dmem_decr.
# 
# Parameters @dmem_incr and @dmem_decr specify by how much membalance will try
# to expand or contract a domain in a single @interval cycle, as a percentage
# of current domain memory size. Normally the amount of domain expansion or
# trimming within a single @interval cycle is limited to @dmem_incr and
# @dmem_decr correspondingly, however in the event of dire host memory
# shortage membalance can trim domains by more than @dmem_decr, even all way
# down to @dmem_min.
#
# Defaults:
#
#    rate_high = 200 kb/sec
#    dmem_incr = 6%  (valid range: 0.5 - 30%)
#
#    rate_low = 0 kb/sec
#    dmem_decr = 4%  (valid range: 0.5 - 10%) 
#
# It is recommended to leave @dmem_incr and @dmem_decr fairly small so as
# to prevent excessive membalance over-adjustment, but still substantial.
# Normally default values are adequate. Generally with default @interval
# value of 5 seconds, reasonable value for @dmem_incr ought not exceed 10%.
# It is also reasonable to keep the value for @dmem_decr somewhat below that
# of @dmem_incr, so domains would inflate fast when they need memory but
# deflate slower.
#
#rate_high = 200 kb/sec
#dmem_incr = 6%
#rate_low = 0 kb/sec
#dmem_decr = 4%

#
# If guest data rate is <= @rate_zero, it is considered to be zero
# regardless of the reported rate value.
#
# Default: 30 kb/s
#
#rate_zero = 30 kb/s

#
# If guest system has more than @guest_free_threshold percent of
# free guest system memory, its data map-in rate is considered to be
# zero regardless of the reported rate value.
#
# Default: 15%
#
#guest_free_threshold = 15%

#
# Trim domain memory allocation down to @dmem_quota when it transitions
# from managed to unmanaged, in case if it is above @dmem_quota
#
# Possible values: yes/true or no/false
#
# Default: yes
#
#trim_unmanaged = yes

#
# Trim domain memory allocation down to @dmem_quota if it has not been
# reporting its data map-in rate data (e.g. memprobed daemon stopped
# running in the guest) for @trim_unresponsive seconds, while domain
# has been staying runnable over this time, and domain size is over
# @dmem_quota
# 
# Default: 200 seconds
# 
# If set to 0, no trimming is performed
# 
#trim_unresponsive = 200 sec

#
# Estimated threshold on domain guest OS startup time.
#
# This value can also be refined on a per-domain basis.
#
# If domain uptime is less than @startup_time and domain did not start to
# report rate data yet, it may be given a benefit of the doubt that it did
# not have a good-faith chance to start memprobed daemon yet and accorded
# a somewhat more lenient treatment in certain memory shortage situations
# compared to older non-reporting domains.
#
# Default: 300 seconds
#
#startup_time = 300 sec

###############################################################################
#  Miscellaneous membalance internal parameters 			      #
#  that usually do need not be tuned                                          #
###############################################################################

#
# Maximum XenStore transaction retry attempts.
# Used when starting or committing a transaction.
#
# Default: 20 (times)
#
#max_xs_retries = 20

#
# When starting up as a daemon and Xen has not fully completed its
# initialization yet, wait up to @max_xen_init_retries seconds for Xen to
# initialize before, and log message about waiting after @xen_init_retry_msg
# seconds.
#
# Default for @max_xen_init_retries: 300 (seconds)
# Default for @xen_init_retry_msg: 15 (seconds)
#
#max_xen_init_retries = 300
#xen_init_retry_msg = 15

#
# If domain has been in pending state (with membalance trying to collect
# wdata about it) and data collection did not complete within
# domain_pending_timeout seconds, declare the domain as unmanaged.
# Default: 300 (seconds)
#
#domain_pending_timeout = 300 sec

