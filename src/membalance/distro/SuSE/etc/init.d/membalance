#!/bin/bash
#
# Author: Sergey Oboguev <oboguev@yahoo.com>
#
# /etc/init.d/membalance
#     and its symbolic links
# /usr/sbin/membalance
#
# LSB compliant service control script.
# See http://www.linuxbase.org/spec
# 
### BEGIN INIT INFO
# Provides:                   membalance
# Required-Start:             $local_fs $syslog xen
# Required-Stop:              $null
# Default-Start:              2 3 4 5
# Default-Stop:               0 1 6
# Short-Description: Listen and process MEMBALANCE events from the active VMs
# Description:       membalance reads messages from memprobed instances
#	running in active virtual machines and dynamically adjusts per-VM
#	memory allocations according to the reported current memory pressure/demand.
### END INIT INFO
# A registry has been set up to manage the init script namespace.
# http://www.lanana.org/
# Please use the names already registered or register one or use a
# vendor prefix.

# Check for missing binaries
MEMBALANCED_BIN=/sbin/membalanced
MEMBALANCECTL_BIN=/sbin/membalancectl
MEMBALANCED_ARGS="--daemon"

test -x $MEMBALANCED_BIN || { echo "$MEMBALANCED_BIN not installed"; 
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

test -x $MEMBALANCECTL_BIN || { echo "$MEMBALANCECTL_BIN not installed"; 
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

# Source LSB init functions
# providing start_daemon, killproc, pidofproc, 
# log_success_msg, log_failure_msg and log_warning_msg.
# This is currently not used by UnitedLinux based distributions and
# not needed for init scripts for UnitedLinux only. If it is used,
# the functions from rc.status should not be sourced or used.
#. /lib/lsb/init-functions

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
#      rc_active	checks whether a service is activated by symlinks
#      rc_splash arg    sets the boot splash screen to arg (if active)
. /etc/rc.status

# Reset status of this service
rc_reset

# Return values according to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
	start)
		echo -n "Starting membalance "
		## Start daemon with startproc(8). If this fails
		## the return value is set appropriately by startproc.
		startproc -n -5 $MEMBALANCED_BIN $MEMBALANCED_ARGS

		# Remember status and be verbose
		rc_status -v
		;;
	stop)
		echo -n "Shutting down membalance "
		## Stop daemon with killproc(8) and if this fails
		## killproc sets the return value according to LSB.
		killproc -TERM $MEMBALANCED_BIN

		# remember status and be verbose
		rc_status -v
		;;
	try-restart|condrestart)
		## Do a restart only if the service was active before.
		## Note: try-restart is now part of LSB (as of 1.9).
		## RH has a similar command named condrestart.
		if test "$1" = "condrestart"; then
			echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
		fi
	        $0 status
		if test $? = 0; then
			$0 restart
		else
			rc_reset        # Not running is not a failure.
		fi
		# Remember status and be quiet
		rc_status
		;;
	restart)
		## Stop the service and regardless of whether it was
		## running or not, start it again.
		$0 stop
		$0 start
		# remember status and be quiet
		rc_status
		;;
	force-reload|reload)
		echo -n "Reload service membalance "
		killproc -HUP $MEMBALANCED_BIN
		rc_status -v
		;;
	probe)
		exit 3
		;;
	status)
		echo -n "Checking for service membalance "
		## Check status with checkproc(8), if process is running
		## checkproc will return with exit status 0.

		# Return value is slightly different for the status command:
		# 0 - service up and running
		# 1 - service dead, but /var/run/  pid  file exists
		# 2 - service dead, but /var/lock/ lock file exists
		# 3 - service not running (unused)
		# 4 - service status unknown :-(
		# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
	
		# NOTE: checkproc returns LSB compliant status values.
		checkproc $MEMBALANCED_BIN
		# NOTE: rc_status knows that we called this init script with
		# "status" option and adapts its messages accordingly.
		rc_status -v
		;;
	pause)
		echo -n "Pausing service membalance "
		$MEMBALANCECTL_BIN --exec $MEMBALANCED_BIN pause
		rc_status -v
		;;
	resume)
		echo -n "Resuming service membalance "
		$MEMBALANCECTL_BIN --exec $MEMBALANCED_BIN resume
		rc_status -v
		;;
	debug-dump)
		echo -n "Dumping debugging information for service membalance "
		killproc -USR1 $MEMBALANCED_BIN
		rc_status -v
		;;
	*)
		echo "Usage: $0" \
		     "{start|stop|status|try-restart|restart|force-reload|reload|probe|pause|resume|debug-dump}"
		exit 1
		;;
esac
rc_exit

